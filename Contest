pip install transformers datasets
from datasets import load_dataset

# Load the dataset from Hugging Face
dataset = load_dataset("ad6398/nyu-dl-teach-maths-comp")
train_dataset = dataset['train']
test_dataset = dataset['test']


# Step 2: Load tokenizer
from transformers import AutoTokenizer

# Load tokenizer for the Llama3-8B model
tokenizer = AutoTokenizer.from_pretrained("meta-llama/Llama-3b")

def preprocess_function(examples):
    # Combine the question and solution for context
    inputs = [q + " " + s for q, s in zip(examples["question"], examples["solution"])]
    targets = examples["is_correct"]
    
    # Tokenize inputs and labels
    model_inputs = tokenizer(inputs, padding="max_length", truncation=True, max_length=512)
    
    # Encode the labels as integers (0 for False, 1 for True)
    model_inputs["labels"] = targets
    return model_inputs

# Preprocess datasets
train_dataset = train_dataset.map(preprocess_function, batched=True)
test_dataset = test_dataset.map(preprocess_function, batched=True)


from transformers import AutoModelForSequenceClassification, TrainingArguments, Trainer

# Load the Llama3-8B model for binary classification
model = AutoModelForSequenceClassification.from_pretrained("meta-llama/Llama-3b", num_labels=2)

# Define training arguments
training_args = TrainingArguments(
    output_dir="./results",
    evaluation_strategy="epoch",
    learning_rate=2e-5,
    per_device_train_batch_size=4,
    per_device_eval_batch_size=4,
    num_train_epochs=3,
    weight_decay=0.01,
)


import numpy as np
from datasets import load_metric

# Load accuracy metric from datasets
accuracy_metric = load_metric("accuracy")

def compute_metrics(eval_pred):
    logits, labels = eval_pred
    predictions = np.argmax(logits, axis=-1)
    return accuracy_metric.compute(predictions=predictions, references=labels)


# Initialize Trainer
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=test_dataset,
    compute_metrics=compute_metrics,
)

# Start training
trainer.train()


# Evaluate the model on the test dataset
results = trainer.evaluate()
print("Test Accuracy:", results["eval_accuracy"])


# Save the model
model.save_pretrained("./math-answer-verification-model")
tokenizer.save_pretrained("./math-answer-verification-model")

